// src/pages/Questionnaires/PHQ9.jsx

import React, { useState } from "react";
import { useNavigate } from "react-router-dom"; 
// ðŸŸ¢ IMPORT: Auth Context for user check
import { useAuth } from '../../context/AuthContext'; 
import "./PHQ9.css"; 

// --- Questionnaire Data ---
const phq9Questions = [
Â  "Little interest or pleasure in doing things",
Â  "Feeling down, depressed, or hopeless",
Â  "Trouble falling or staying asleep, or sleeping too much",
Â  "Feeling tired or having little energy",
Â  "Poor appetite or overeating",
Â  "Feeling bad about yourself â€” or that you are a failure or have let yourself or your family down",
Â  "Trouble concentrating on things, such as reading the newspaper or watching television",
Â  "Moving or speaking so slowly that other people could have noticed. Or the opposite â€” being so fidgety or restless that you have been moving around a lot more than usual",
Â  "Thoughts that you would be better off dead, or thoughts of hurting yourself in some way",
];

const options = [
Â  { value: 0, label: "Not at all" },
Â  { value: 1, label: "Several days" },
Â  { value: 2, label: "More than half the days" },
Â  { value: 3, label: "Nearly every day" },
];

export default function PHQ9() {
Â  const navigate = useNavigate();
Â  const { currentUser } = useAuth(); // ðŸŸ¢ Get current user from context
Â  const [currentQ, setCurrentQ] = useState(0); 
Â  const [answers, setAnswers] = useState(Array(phq9Questions.length).fill(null));
Â  const [submitted, setSubmitted] = useState(false);
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState(null);

Â  // Logic: Allows selection and deselection
Â  const handleAnswer = (value) => {
Â  Â  const updatedAnswers = [...answers];
Â  Â  
Â  Â  if (updatedAnswers[currentQ] === value) {
Â  Â  Â  Â  updatedAnswers[currentQ] = null;
Â  Â  } else {
Â  Â  Â  Â  updatedAnswers[currentQ] = value;
Â  Â  }

Â  Â  setAnswers(updatedAnswers);
Â  Â  setError(null);
Â  };

Â  const handleNext = () => {
Â  Â  Â  if (answers[currentQ] === null) {
Â  Â  Â  Â  Â  setError("Please select an option before proceeding.");
Â  Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  setError(null);
Â  Â  Â  if (currentQ < phq9Questions.length - 1) {
Â  Â  Â  Â  Â  setCurrentQ(currentQ + 1);
Â  Â  Â  } 
Â  };

Â  const handleSubmit = async (finalAnswers) => {
Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  
Â  Â  // ðŸ›‘ Check if user is logged in
Â  Â  if (!currentUser) { 
Â  Â  Â  Â  setError("You must be logged in to submit results.");
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  try {
Â  Â  Â  Â  const idToken = await currentUser.getIdToken(); // ðŸŸ¢ Get Firebase ID Token
Â  Â  Â  Â  const totalScore = finalAnswers.reduce((sum, val) => sum + (val || 0), 0);
        
        // ðŸŸ¢ Extract user details
        const userName = currentUser.displayName;
        const userEmail = currentUser.email;

Â  Â  Â  Â  // API Submission to secure Node.js Backend
Â  Â  Â  Â  const response = await fetch('https://bloomence-99-backend.onrender.com/api/results/save', {
Â  Â  Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  'Content-Type': 'application/json',
Â  Â  Â  Â  Â  Â  Â  Â  'Authorization': `Bearer ${idToken}` 
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  Â  Â  Â  questionnaireType: 'PHQ-9',
Â  Â  Â  Â  Â  Â  Â  Â  totalScore: totalScore,
                userName: userName, // ðŸŸ¢ Added for MongoDB
                userEmail: userEmail, // ðŸŸ¢ Added for MongoDB
Â  Â  Â  Â  Â  Â  Â  Â  firebaseUid: currentUser.uid // Best practice to include
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  Â  Â  throw new Error(errorData.message || 'Failed to save result.');
Â  Â  Â  Â  }

Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  // ðŸŸ¢ FIX: Show success screen instead of navigating immediately
Â  Â  Â  Â  setSubmitted(true);
Â  Â  Â  Â  
Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Submission error:", err);
Â  Â  Â  Â  setError(err.message || "Submission failed. Please check server.");
Â  Â  Â  Â  setLoading(false);
Â  Â  }
Â  };
Â  
  // ðŸŸ¢ Rendering Logic for the Success Screen
Â  if (submitted) {
Â  Â  const totalScore = answers.reduce((sum, val) => sum + (val || 0), 0);
Â  Â  return (
Â  Â  Â  Â  <div className="phq9-wrapper"> 
Â  Â  Â  Â  Â  Â  <div className="phq9-container result-box success">
Â  Â  Â  Â  Â  Â  Â  Â  <h2>PHQ-9 Complete!</h2>
Â  Â  Â  Â  Â  Â  Â  Â  <p>Your Depression Score is: **{totalScore}**</p>
Â  Â  Â  Â  Â  Â  Â  Â  <p>Results saved successfully. Now, please complete the Anxiety assessment.</p>
Â  Â  Â  Â  Â  Â  Â  Â  <button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="submit-btn" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/gad7")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ marginTop: '20px' }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Proceed to GAD-7 Assessment â†’
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="phq9-wrapper"> 
Â  Â  Â  <div className="phq9-container">
Â  Â  Â  Â  <h2>PHQ-9 Questionnaire</h2>
Â  Â  Â  Â  
Â  Â  Â  Â  <p className="intro-text">
Â  Â  Â  Â  Â  **Over the last 2 weeks, how often have you been bothered by any of the following problems?**
Â  Â  Â  Â  </p>
Â  Â  Â  Â  
Â  Â  Â  Â  <p className="progress-tracker">
Â  Â  Â  Â  Â  Question {currentQ + 1} of {phq9Questions.length}
Â  Â  Â  Â  </p>

Â  Â  Â  Â  <div className="question-card single-question-view">
Â  Â  Â  Â  Â  <p className="question-text">
Â  Â  Â  Â  Â  Â  {currentQ + 1}. {phq9Questions[currentQ]}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <div className="options">
Â  Â  Â  Â  Â  Â  {options.map((opt) => (
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  key={opt.value}
Â  Â  Â  Â  Â  Â  Â  Â  className={`option-button ${answers[currentQ] === opt.value ? 'selected' : ''}`}
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleAnswer(opt.value)}
Â  Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <span className="option-indicator"></span> 
Â  Â  Â  Â  Â  Â  Â  Â  {opt.label}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {error && <p className="error-message">ðŸš¨ {error}</p>}
Â  Â  Â  </div>
Â  Â  Â  
Â  Â  Â  <div className="navigation-controls-outside">
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className="nav-btn prev"
Â  Â  Â  Â  Â  onClick={() => setCurrentQ(currentQ - 1)}
Â  Â  Â  Â  Â  disabled={currentQ === 0 || loading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <span>&larr; Previous</span>
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className="nav-btn next"
Â  Â  Â  Â  Â  onClick={() => currentQ === phq9Questions.length - 1 ? handleSubmit(answers) : handleNext()}
Â  Â  Â  Â  Â  disabled={loading} 
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  Â  {loading 
Â  Â  Â  Â  Â  Â  Â  ? 'Processing...' 
Â  Â  Â  Â  Â  Â  Â  : (currentQ === phq9Questions.length - 1 
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'Submit' 
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'Next Question'
Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}
